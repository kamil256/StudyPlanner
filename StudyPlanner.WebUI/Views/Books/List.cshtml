@using StudyPlanner.WebUI.Models;

@model BooksListViewModel


@{ 
    ViewBag.Title = "Books";
}

<link href="~/Content/CSS/Site.css" rel="stylesheet" />
<link href="~/Content/CSS/Pagination.css" rel="stylesheet" />
<link href="~/Content/CSS/popUp.css" rel="stylesheet" />
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>

<h1 class="heading">Books <button class="btn btn-default btn-xs" onclick="document.getElementById('addBook').className=''">Add new</button> @*@Html.ActionLink("Add new", "List", new { AddBook = true }, new { @class = "btn btn-default btn-xs" })*@</h1>

<div class="row">
    <div class="col-sm-3 side-panel">
        @using (Html.BeginForm("List", "Books", FormMethod.Post, new { id = "FilteringForm", autocomplete = "off" }))
        {
            <div class="form-group">
                @Html.LabelFor(x => x.SearchString, "Search titles and authors:")
                @Html.TextBoxFor(x => x.SearchString, new { @class = "form-control" })
            </div>
            <div class="form-group">
                @Html.LabelFor(x => x.ReleasedFrom, "Released from:")
                @Html.TextBoxFor(x => x.ReleasedFrom, new { @class = "form-control", type = "date" })
            </div>
            <div class="form-group">
                    @Html.LabelFor(x => x.ReleasedTo, "Released to:")
                    @Html.TextBoxFor(x => x.ReleasedTo, new { @class = "form-control", type = "date" })
            </div>
            <div class="form-group">
                @Html.Label("Pages:")
                <div class="form-control-range">
                    @Html.TextBoxFor(x => x.PagesFrom, new { @class = "form-control", type = "number" })
                    <div>-</div>
                    @Html.TextBoxFor(x => x.PagesTo, new { @class = "form-control", type = "number" })
                </div>
            </div>
            <div class="form-group">
                <b>Authors:</b>
                @foreach (var a in Model.Authors)
                {
                    <div class="checkbox">
                        @Html.LabelFor(x => x.SelectedAuthors[a.AuthorId.ToString()], a.Name)
                        @Html.CheckBoxFor(x => x.SelectedAuthors[a.AuthorId.ToString()])
                    </div>
                }
            </div>
            <div class="form-group">
                <b>Publishers:</b>
                @foreach (var p in Model.Publishers)
                {
                    <div class="checkbox">
                        @Html.LabelFor(x => x.SelectedPublishers[p.PublisherId.ToString()], p.Name)
                        @Html.CheckBoxFor(x => x.SelectedPublishers[p.PublisherId.ToString()])
                    </div>
                }
            </div>
            @Html.ActionLink("Clear filtering and sorting", "Books", null, new { @class = "btn btn-default btn-sm" })
        }
    </div>

    <div class="col-sm-9">        
        @if (Model.Books.Count() == 0)
        {
            <div class="alert alert-danger">No books were found!</div>
        }
        else
        {
            <div class="form-group sorting-group">
                <b>Sort by: </b>
                @Html.DropDownListFor(x => x.SelectedSorting, new SelectList(Enum.GetNames(typeof(BooksListViewModel.Sorting)), Model.SelectedSorting), new { @class = "form-control", form = "FilteringForm" })
                @Html.DropDownListFor(x => x.SelectedSortingOrder, new SelectList(Enum.GetNames(typeof(BooksListViewModel.SortingOrder)), Model.SelectedSortingOrder), new { @class = "form-control", form = "FilteringForm" })
            </div>

            foreach (var x in Model.Books)
            {
                <div class="well book-details">
                    @Html.ActionLink(HttpUtility.HtmlDecode("&times;"), "RemoveBook", new { BookId = x.BookId })
                    <img src="@*/Covers/@x.Cover*@" width="120" />
                    <div>
                        <b>@Html.MarkSearchedString(x.Title, Model.SearchString)</b>
                        @{ 
                            var authors = (from a in x.AuthorOfBooks orderby a.Priority select a.Author).ToArray();
                        }
                        @switch (authors.Count() @*.Authors.Count*@)
                        {
                            case 0:
                                @:Author: unknown
                                break;
                            case 1:
                                @:Author:
                                break;
                            default:
                                @:Authors:
                                break;
                        }
                        @for (int i = 0; i < authors.Count(); i++)
                        {
                            if (i < authors.Count() - 1)
                            {
                                <a href="@Url.Action("List", new { selectedAuthor = authors[i].Name })">@Html.MarkSearchedString(authors[i].Name, Model.SearchString)</a><span>,</span>
                            }
                            else
                            {
                                <a href="@Url.Action("List", new { selectedAuthor = authors[i].Name })">@Html.MarkSearchedString(authors[i].Name, Model.SearchString)</a>
                            }
                        }
                        <br />
                        Publisher: @Html.ActionLink(x.Publisher.Name, "List", new { selectedPublisher = x.Publisher.Name })<br />
                        Released: @x.Released.ToLongDateString()<br />
                        Pages: @x.Pages
                        <div class="btn-group">
                            @Html.ActionLink("Sections", "Sections", "Home", new { BookId = x.BookId }, new { @class = "btn btn-sm btn-default" })
                            @Html.ActionLink("Trainings", "Trainings", "Home", new { FilterBookId = x.BookId }, new { @class = "btn btn-sm btn-default" })
                        </div>
                    </div>
                        
                </div>
            }
            
            @Html.HiddenFor(x => x.Page, new { form = "FilteringForm" })
            @Html.Pagination(Model.Pagination.CurrentPage, Model.Pagination.TotalPages, x => $"GoToPage({x})")
        }
    </div>
</div>

<div id="addBookPopUp">
    
    @Html.Action("AddBook")
</div>

<script>
    function GoToPage(x)
    {
        document.getElementById("Page").value = x;
        $("#FilteringForm").submit();
    }

    $("#FilteringForm input").on("change", function () { $("#FilteringForm").submit(); });
    $("select[form='FilteringForm'").on("change", function () { $("#FilteringForm").submit(); });
</script>

<script>
    window.onload = function start() {
        $("#Author").on("keydown",
            function (e) {
                if ((e.keyCode | e.which) == 13) {
                    e.preventDefault();
                    AddAuthor($("#Author").val());
                }
            });

        //$("#Author").on("change",
        //    function () {
        //        AddAuthor($("#Author").val());
        //    });



    }

    function sendCoverImage() {
        console.log("sent");
        var data = new FormData();
        //var inputs = document.getElementById("addBook").getElementsByTagName("input");
        //for (var i = 0; i < inputs.length; i++) {
        //    if (inputs[i].name) {
        //        if (inputs[i].type == "file")
        //            data.append(inputs[i].name, inputs[i].files[0]);
        //        else
        //            data.append(inputs[i].name, inputs[i].value);
        //    }
        //}


        var cover = document.getElementById("Cover");
        if (cover.files[0])
        {
            data.append("Cover", cover.files[0]);
            $.ajax({
                url: '@Url.Action("AddBook")',
                //dataType: 'text',
                cache: false,
                contentType: false,
                processData: false,
                data: data,
                type: 'POST',
                success: function (response) {
                    @*document.getElementById("image").src = "@Url.Action("GetTempCover")";*@
                    @*alert("@Url.Action("GetTempCover")");*@
                    //$("#Form").submit();
                    readURL(document.getElementById("Cover"));
                }
            });
        }
    }

    function readURL(input) {

        if (input.files && input.files[0]) {
            var reader = new FileReader();

            reader.onload = function (e) {
                document.getElementById("image").className = "";//document.getElementById("image").style.display = "block";
                document.getElementById("chooseImageMsg").className = "hidden";
                $('#image').attr('src', e.target.result);
            }

            reader.readAsDataURL(input.files[0]);
        }
    }

    //$("#Cover").change(function () {
    //    readURL(this);
    //});


         function cancelCover()
         {
            var image = document.getElementById("image");
            image.className = "hidden";
            document.getElementById("chooseImageMsg").className = "";
         };




    var authors = [];

    function getAuthorsFromHidden()
    {
        authors = [];
        var inputAuthors = document.getElementById("hiddenAuthors").getElementsByTagName("input");
        for (var i = 0; i < inputAuthors.length; i++)
        {
            authors.push(inputAuthors[i].value);
        }
    }

    function createHiddenFromAuthors()
    {
        var authorsElement = document.getElementById("authorsList");
        authorsElement.innerHTML = "";
        for (var i = 0; i < authors.length; i++)
            authorsElement.innerHTML += "<li>" + authors[i] + "<b onclick='RemoveAuthor(" + i + ")'> &times;</b></li> ";

        var inputAuthors = document.getElementById("hiddenAuthors");
        inputAuthors.innerHTML = "";
        for (var i = 0; i < authors.length; i++)
            inputAuthors.innerHTML += "<input type='hidden' id='Authors_" + i + "_' name='Authors[" + i + "]' value='" + authors[i] + "' />";
    }

    function AddAuthor(name)
    {
        if ($("#Author").val() != "")
        {
            getAuthorsFromHidden();
            if (authors.indexOf(name) == -1)
            {
                authors.push(name);
                createHiddenFromAuthors();
            }
            $("#Author").val("");
        }
    }

    function RemoveAuthor(nr)
    {
        getAuthorsFromHidden();
        authors.splice(nr, 1);
        createHiddenFromAuthors();
    }
</script>