@model StudyPlanner.WebUI.Models.SectionsListViewModel

@{ 
    ViewBag.Title = "Sections";
}

<link href="~/Content/CSS/Sections.css" rel="stylesheet" />

<h1 class="heading">Sections</h1>

<div style="margin: 0 35px">
    @if (Model.Books.Count() == 0)
    {
        <div class="alert alert-danger">No books were found!</div>
    }
    else
    {
        using (Html.BeginForm("List", "Sections", FormMethod.Get, new { id = "SelectBookForm" }))
        {
            <div class="form-group">
                @Html.Label("BookId", "Select a book to see its sections: ")
                @Html.DropDownList("BookId", new SelectList(Model.Books, "BookId", "Title", Model.SelectedBookId), new { @class = "form-control" })
            </div>
        }

        <div class="well well book-details">
            <img src="@Url.Action("GetCover", "Books", new { bookId = Model.SelectedBookId })" width="120" />
            <div>
                <b>@Model.Books.FirstOrDefault(b => b.BookId == Model.SelectedBookId).Title</b>
                @switch (Model.SelectedBookAuthors.Count())
                {
                    case 0:
                        @:Author: unknown
                    break;
                    case 1:
                        @:Author:
                    break;
                    default:
                        @:Authors:
                    break;
                }
                @for (int i = 0; i < Model.SelectedBookAuthors.Count(); i++)
                {
                    if (i < Model.SelectedBookAuthors.Count() - 1)
                    {
                        @Model.SelectedBookAuthors.ToList()[i]<span>,</span>
                    }
                    else
                    {
                        @Model.SelectedBookAuthors.ToList()[i]
                    }
                }
                <br />
                Publisher: @Model.Books.FirstOrDefault(b => b.BookId == Model.SelectedBookId).Publisher.Name<br />
                Released: @Model.Books.FirstOrDefault(b => b.BookId == Model.SelectedBookId).Released.ToLongDateString()<br />
                Pages: @Model.Books.FirstOrDefault(b => b.BookId == Model.SelectedBookId).Pages
            </div>
        </div>

        using (Html.BeginForm("List", "Sections", FormMethod.Post, new { autocomplete = "off" }))
        {
            <table class="table sections-table">
                <thead>
                    <tr>
                        <th colspan="3">Pages</th>
                        <th>Total pages</th>
                        <th>Section name</th>
                        <th>Trainings completed</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var x in Model.Sections)
                    {
                        <tr>
                            <td>@x.StartPageNumber</td>
                            <td>-</td>
                            <td>@x.EndPageNumber</td>
                            <td>@(x.EndPageNumber - x.StartPageNumber + 1)</td>
                            <td>@x.Name</td>
                            <td>@x.Trainings.Where(t => t.CompletedDate != null).Count()</td>
                            <td>
                                @if (x.Trainings.Where(t => t.CompletedDate == null).Count() != 0)
                                {
                                    @Html.ActionLink("Go to training", "List", "Trainings", new { FilterBookId = Model.SelectedBookId, FilterSectionId = x.SectionId, FilterTrainingCompleted = false }, new { @class = "btn btn-default btn-xs" })
                                }
                                else
                                {
                                    // Use POST request
                                    @Html.ActionLink("Start new training", "AddTraining", new { SelectedBookId = Model.SelectedBookId, SectionId = x.SectionId }, new { @class = "btn btn-default btn-xs" })
                                }
                            </td>
                        </tr>
                    }
                    <tr>
                        <td>@Html.TextBoxFor(x => x.NewSectionStartPageNumber, new { type = "number", @class = "form-control", required = "required" })</td>
                        <td>-</td>
                        <td>@Html.TextBoxFor(x => x.NewSectionEndPageNumber, new { type = "number", @class = "form-control", required = "required" })</td>
                        <td id="NewSectionTotalPages">-</td>
                        <td>@Html.TextBoxFor(x => x.NewSectionName, new { @class = "form-control", required = "required" })</td>
                        <td>-</td>
                        <td>
                            <input type="hidden" name="selectedBookId" value="@Model.SelectedBookId" />
                            <input type="submit" value="Add" class="btn btn-default btn-xs" />
                        </td>
                    </tr>
                </tbody>
            </table>
        }
    }
</div>

<script type="text/javascript">
    $(function () {
        $("#BookId").on("change", function () { $("#SelectBookForm").submit() });
    });

    var newSectionStartPageNumber = document.getElementById("NewSectionStartPageNumber");
    var newSectionEndPageNumber = document.getElementById("NewSectionEndPageNumber");
    var newSectionTotalPages = document.getElementById("NewSectionTotalPages");

    newSectionStartPageNumber.onchange = countNewSectionsTotalPages;
    newSectionEndPageNumber.onchange = countNewSectionsTotalPages;

    function countNewSectionsTotalPages()
    {
        if (newSectionStartPageNumber.value && newSectionEndPageNumber.value)
            newSectionTotalPages.innerHTML = newSectionEndPageNumber.value - newSectionStartPageNumber.value + 1;
        else
            newSectionTotalPages.innerHTML = "-";
    }
</script>
