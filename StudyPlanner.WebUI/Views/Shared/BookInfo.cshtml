@model StudyPlanner.WebUI.Models.BooksBookInfoViewModel

<div class="well book-info">
    <span id="remove-book-btn-" class="remove-book-btn">&times;</span>
    <div>
        <img src="@Url.Action("GetCoverImage", new { bookId = Model.Book.BookId })" />
    </div>
    <div>
        <b>
            @Html.MarkSearchedString(Model.Book.Title, Model.SearchString) 
            <button class="btn btn-default btn-xs" onclick='editBook(
            {
                bookId: @Model.Book.BookId, 
                title: "@Model.Book.Title", 
                authors: @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.Authors.Select(a => a.Name))),
                publisher: "@Model.Book.Publisher.Name", 
                released: "@Model.Book.Released.ToString("yyyy-MM-dd")",
                pages: @Model.Book.Pages
            })'>Edit</button>
        </b>
        <p>
            @switch (Model.Authors.Count())
            {
                case 0:
                    @:Author: unknown
                break;
                case 1:
                    @:Author:
                break;
                default:
                    @:Authors:
                break;
            }
            @for (int i = 0; i < Model.Authors.Count(); i++)
            {
                <a href="@Url.Action("List", new { selectedAuthor = Model.Authors[i].Name })">
                    @(Html.MarkSearchedString(Model.Authors[i].Name, Model.SearchString) + (i < Model.Authors.Count() - 1 ? "," : ""))
                </a>
            }
        </p>
        <p>Publisher: @Html.ActionLink(Model.Book.Publisher.Name, "List", new { selectedPublisher = Model.Book.Publisher.Name })</p>
        <p>Released: @Model.Book.Released.ToLongDateString()</p>
        <p>Pages: @Model.Book.Pages</p>

        <div class="btn-group">
            @Html.ActionLink("Sections", "Sections", "Home", new { BookId = Model.Book.BookId }, new { @class = "btn btn-sm btn-default" })
            @Html.ActionLink("Trainings", "Trainings", "Home", new { FilterBookId = Model.Book.BookId }, new { @class = "btn btn-sm btn-default" })
        </div>
    </div>
</div>

<script>
    $(document).ready(function()
    {
        $("#remove-book-btn").on("click", function()
        {
            removeBook(@Model.Book.BookId, '@Model.Book.Title');
        });

        $(".add-edit-book-btn").on("click", function(e)
        {
            editBook(e.target.value);
        });
    });

    function removeBook(bookId, title)
    {
        $("#remove-book-id").val(bookId);
        $("#remove-book-title").html(title);
        $('#remove-book-dialog').dialog('open');
    }

    function editBook(book)
    {
        $('#add-edit-book-heading').text('Edit book');
        $("#add-edit-book-id").val(book.bookId);
        $("#add-edit-book-title").val(book.title);
        $("#add-edit-book-publisher").val(book.publisher);
        $("#add-edit-book-released").val(book.released);
        $("#add-edit-book-pages").val(book.pages);
        $("#add-edit-book-cover").attr("files", null);
        $("#image").prop("outerHTML", "<img id='image' src='/Books/GetCoverImage?bookId=" + book.bookId + "' />");
        $("#chooseImageMsg").attr("class", "hidden");
        createHiddenFromAuthors(book.authors);
        $("#add-edit-book-dialog").dialog("open");
        selectedFile = null;
    }
</script>